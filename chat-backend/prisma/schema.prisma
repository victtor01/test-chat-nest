// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String @id @unique @default(uuid())
  profileId String @unique @default(uuid())
  nickname  String @unique
  name      String
  email     String @unique
  password  String

  friends  User[] @relation("friends")
  friendOf User[] @relation("friends")

  sentFriendRequests     FriendRequest[] @relation("sender")
  receivedFriendRequests FriendRequest[] @relation("receiver")

  conversations Conversation[]
  Message       Message[]

  @@map("users")
}

model Conversation {
  id      String   @id @unique @default(uuid())
  isGroup Boolean? @default(false)
  name    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]
  users    User[]
}

model Message {
  id   String @id @unique @default(uuid())
  text String

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}

model FriendRequest {
  id         String @id @default(uuid())
  senderId   String
  receiverId String

  sender   User @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("friend_requests")
}
